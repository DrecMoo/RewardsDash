import abi from './abi.js'
const babyCasperContract = '0x4b7d697635e6b9965d13e0655F538149dE425F4E',
  rewardSender = '0xF93C677795c6caE2DA21C5815CB09314E2F04Db0',
  divider = Math.pow(10, 9),
  divider18 = Math.pow(10, 18)
let contract, rewardContract, web3
const currency = function (t, a = 'BUSD') {
    return t.toLocaleString('en-US').concat(` ${a}`)
  },
  getContract = async () => {
    ;(contract = new web3.eth.Contract(abi, babyCasperContract)),
      (rewardContract = new web3.eth.Contract(abi, rewardSender))
  }
export const getWeb3 = () => (
  (web3 = new Web3('https://bsc-dataseed1.ninicoin.io/')),
  (web3.eth.handleRevert = !0),
  web3
)
export const getBabyCasperBal = async t => (
  void 0 === contract && (await getContract()),
  (await contract.methods.balanceOf(t).call()) / divider
)
export const getRewards = async t => {
  const a = await getBabyCasperBal(t)
  void 0 === rewardContract && (await getContract())
  const e = await rewardContract.methods.shares(t).call()
  return {
    balance: currency(a, ''),
    paid: currency(e.totalRealised / divider18),
    unpaid: currency(
      (await rewardContract.methods.getUnpaidEarnings(t).call()) / divider18
    )
  }
}
export const getTotalRewards = async () => {
  void 0 === rewardContract && (await getContract())
  const t =
      (await rewardContract.methods.totalDividends.call().call()) / divider18,
    a =
      (await rewardContract.methods.totalDistributed.call().call()) / divider18
  return {
    totalRewards: currency(t),
    totalPaid: currency(a),
    totalUpcoming: currency(t - a)
  }
}